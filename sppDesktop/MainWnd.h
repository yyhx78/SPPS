#ifndef MainWnd_H
#define MainWnd_H

#pragma warning( push, 0 )
#include "vtkObject.h"
#include "vtkSmartPointer.h"    // Required for smart pointer internal ivars.
#include "vtkRenderer.h"
#include <QMainWindow>
#pragma warning(pop)


// Forward Qt class declarations
class Ui_RltView;
class QListWidget;
class QStandardItemModel;
class QItemSelection;
class QModelIndex;
class QTreeWidgetItem;
class QXmlStreamReader;
class QFileInfo;
class QComboBox;

class RadioButtonTreeView;
class sheetDisplayOptions;
class QtVtkView;

class vtkPlane;
class TreeModel;
class vtkScalarBarActor;

class MainWnd : public QMainWindow
{
  Q_OBJECT

public:

  // Constructor/Destructor
    MainWnd();
    ~MainWnd();
 
   	TreeModel* dataModel();

signals:
	//display on the text window is handled by the slot_OnQuery function
    void signal_OnQuery(QString &queryRlt);
    void signal_OnSelect();
    void signal_OnCenter();

public slots:

    virtual void slotOpenFile();
    virtual void slotOpen_Folder();
    virtual void slotExport();
    virtual void slotExit();

    virtual void slotDoCutting();
    virtual void slotDoCenter(); //switch view mode
    virtual void slot_OnCenter();//after doCenter
    virtual void slotDoQuery();
    virtual void slotDoRotate();
    virtual void slotDoReset();

    virtual void slotConnectItemChanged(int);
    
	virtual void slotTreeViewItemDataChanged(const QModelIndex &, const QModelIndex &);
	virtual void slotTreeViewItemCheckStatusChanged(const QModelIndex &);
    
	void rebuildTreeView();
	void resetDisplay();
    void repaint();
    vtkRenderer* renderer();
    QtVtkView* qvtkWidget();

    void slotOnVtkViewMouseEvent(QMouseEvent* event);
    void slot_OnScalarBarModified(vtkScalarBarActor* a);
    
    void setCuttingPlane(vtkPlane *plane);
    void updateCuttingPlane(vtkPlane* plane);//call this after plane, or mesh, or result have been changed
    void createCuttingPlane(double *aRayStart, double *aRayDir);
    //attach a plane widget on it so that it can be moved
    void activateCuttingPlaneWidget(vtkPlane *vPlane, bool bActivate);
    //keep the plane, just disable it (no cuts generated by it)
    void activateCuttingPlane(vtkPlane *aPlane, bool bActivate);

protected:
    void createDockWindows();
	void onViewStatusChange(QAction*);
    
    QComboBox *m_connectBox;
    RadioButtonTreeView *m_treeView;
    sheetDisplayOptions *m_PropertiesView;
    QMenu *viewMenu;
protected slots:

private:
    TreeModel *m_pTreeModel;

    void displayScalarBar();
    void openResultsFolder(const char* aFolder);
    
  // Designer form
  Ui_RltView *m_ui;
};

#endif // SimpleView_H
